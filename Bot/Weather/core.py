from datetime import date, timedelta
from aiohttp import ClientSession
from async_lru import alru_cache
from Bot.utils import req_counter
from copy import deepcopy
from Bot.CALLBACKS import SHORT


class Weather:
    """
    –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è Weather.current_weather()
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ Weather.tomorrow_weather()
    """
    def __init__(self, coord, cur_date, weather_type):
        self.coord = coord
        self._cur_date = cur_date
        self._weather_type = weather_type

    @staticmethod
    @alru_cache(maxsize=15)
    @req_counter("API_REQ")
    async def _request_weather(coord, start_date: date):
        """
        –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã API, –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è
        """
        end_date = start_date + timedelta(days=6)
        url = "https://api.open-meteo.com/v1/forecast"
        params = {
            "latitude": coord[0],
            "longitude": coord[1],
            "start_date": str(start_date),
            "end_date": str(end_date),
            "hourly": "temperature_2m,precipitation_probability,"
                      "rain,showers,snowfall,cloudcover,windspeed_10m,"
                      "winddirection_10m,windgusts_10m,weathercode",
            "timezone": "auto"
        }
        async with ClientSession() as session:
            async with session.get(url, params=params) as response:
                res = await response.json()
                return res

    async def _get_weather(self):
        """
        –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ê–ü–ò –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
        """
        req = await self._request_weather(self.coord, self._cur_date)
        req = deepcopy(req)
        normal_data = self._data_normalize(req)
        return normal_data

    @staticmethod
    def _data_normalize(api_req):
        """
        –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        data = api_req["hourly"]
        time_points = [*enumerate(data.pop("time"))]
        res = {}
        for i, t in time_points:
            inner = []
            for k, v in data.items():
                inner.append((k, v[i]))
            res[t] = {k: v for k, v in inner}
            inner.clear()
        return res

    async def current_weather(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        """
        req = await self._get_weather()
        res = self._filter_data_by_date(self._cur_date, req)
        res_header = self._date_formatting(self._cur_date) + "\n\n"
        res_body = self._day_formatting(res)
        return res_header + res_body

    async def tomorrow_weather(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        """
        req = await self._get_weather()
        tomorrow = self._cur_date + timedelta(days=1)
        res = self._filter_data_by_date(tomorrow, req)
        res_header = self._date_formatting(tomorrow) + "\n\n"
        res_body = self._day_formatting(res)
        return res_header + res_body

    async def weekend_weather(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        """
        req = await self._get_weather()
        saturday, sunday = self._weekend_days()
        for day in (saturday, sunday):
            res = self._filter_data_by_date(day, req)
            res_header = self._date_formatting(day) + "\n\n"
            res_body = self._day_formatting(res)
            yield res_header + res_body

    async def five_day_weather(self):
        """
        –ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π
        """
        req = await self._get_weather()
        first = self._cur_date
        second = self._cur_date + timedelta(days=1)
        third = self._cur_date + timedelta(days=2)
        fourth = self._cur_date + timedelta(days=3)
        five = self._cur_date + timedelta(days=4)
        for day in (first, second, third, fourth, five):
            res = self._filter_data_by_date(day, req)
            res_header = self._date_formatting(day) + "\n\n"
            res_body = self._day_formatting(res)
            yield res_header + res_body

    def _weekend_days(self) -> tuple[date, date]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–∑ —Å—É–±–±–æ—Ç—ã, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è —Ç–∏–ø–∞ date
        """
        year, week, _ = self._cur_date.isocalendar()
        saturday = date.fromisocalendar(year, week, 6)
        sunday = date.fromisocalendar(year, week, 7)
        return saturday, sunday

    def _day_formatting(self, day: dict):
        if self._weather_type == SHORT:
            return self._short_formatting(day)
        else:
            return self._common_formatting(day)

    def _short_formatting(self, day_info: dict):
        night = [v for k, v in day_info.items() if k[-5:] <= "05:00"]
        morning = [v for k, v in day_info.items() if "05:00" < k[-5:] <= "11:00"]
        day = [v for k, v in day_info.items() if "11:00" < k[-5:] <= "17:00"]
        evening = [v for k, v in day_info.items() if "17:00" < k[-5:] <= "23:00"]
        info = {
            "–ù–æ—á—å": {
                "avg": self._get_average_fields(night),
                "max": self._get_max_fields(night),
                "sum": self._get_sum_fields(night)
            },
            "–£—Ç—Ä–æ": {
                "avg": self._get_average_fields(morning),
                "max": self._get_max_fields(morning),
                "sum": self._get_sum_fields(morning)
            },
            "–î–µ–Ω—å": {
                "avg": self._get_average_fields(day),
                "max": self._get_max_fields(day),
                "sum": self._get_sum_fields(day)
            },
            "–í–µ—á–µ—Ä": {
                "avg": self._get_average_fields(evening),
                "max": self._get_max_fields(evening),
                "sum": self._get_sum_fields(evening)
            }
        }
        msg = ""
        for k, v in info.items():
            clouds = Clouds(
                v["avg"]['cloudcover'],
                v["avg"]['rain'], v["avg"]['showers'],
                v['avg']['snowfall'],
                v["max"]["weathercode"]
            )
            wind = Wind(v["avg"]['windspeed_10m'], int(v['avg']['winddirection_10m']), v['max']['windgusts_10m'])
            avg_temp = int(v['avg']['temperature_2m'])
            max_temp = int(v['max']['temperature_2m'])
            weather_code = WeatherCode(v["max"]["weathercode"])
            rain = Rain(v['sum']['rain'], v['sum']['showers'])
            msg += f"<b>{k}</b> {clouds}\n" \
                   f"<i>{weather_code}</i>\n\n" \
                   f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp}‚ÑÉ (max: {max_temp}‚ÑÉ)\n" \
                   f"üí® –í–µ—Ç–µ—Ä: {wind}"
            if rain:
                msg += f"\n‚òîÔ∏è –î–æ–∂–¥—å: {rain}"
            msg += "\n\n"
        return msg

    @staticmethod
    def _common_formatting(day: dict):
        pass

    @staticmethod
    def _get_average_fields(data: list) -> dict[str, float]:
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤, –∏ —Å–≤–æ–¥–∏—Ç –∏—Ö –≤ –æ–¥–∏–Ω —É—Å—Ä–µ–¥–Ω—è—è –∑–Ω–∞—á–µ–Ω–∏—è
        """
        average_dict = {}
        for field in data[0].keys():
            # field —ç—Ç–æ –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∫–ª—é—á–µ–π, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            # –±—É–¥–µ—Ç 'cloudcover', 'precipitation_probability' ...
            values = [item[field] for item in data]  # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
            average_dict[field] = round(sum(values) / len(values), 2)  # –î–æ–± —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å
        return average_dict

    @staticmethod
    def _get_max_fields(data: list):
        """
        –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π
        """
        max_fields = {}
        for field in data[0].keys():
            values = [item[field] for item in data]
            max_fields[field] = max(values)
        return max_fields

    @staticmethod
    def _get_sum_fields(data: list):
        """
        –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –¥–ª—è –ø–æ–ª—è
        """
        sum_fields = {}
        for field in data[0].keys():
            values = [item[field] for item in data]
            sum_fields[field] = sum(values)
        return sum_fields

    @staticmethod
    def _filter_data_by_date(date_input: date, data: dict) -> dict:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
        """
        return {k: v for k, v in data.items() if str(date_input) in k}

    @staticmethod
    def _date_formatting(date_for_format: date):
        months = ["–Ø–Ω–≤–∞—Ä—è", "–§–µ–≤—Ä–∞–ª—è", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä–µ–ª—è", "–ú–∞—è", "–ò—é–Ω—è",
                  "–ò—é–ª—è", "–ê–≤–≥—É—Å—Ç–∞", "–°–µ–Ω—Ç—è–±—Ä—è", "–û–∫—Ç—è–±—Ä—è", "–ù–æ—è–±—Ä—è", "–î–µ–∫–∞–±—Ä—è"]
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        return f"{days[date_for_format.weekday()]}, {date_for_format.day} {months[int(date_for_format.month) - 1]}"

    @classmethod
    def clean_api_cache(cls):
        """–ß–∏—Å—Ç–∏–º –∫–µ—à —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∞–ø–∏"""
        cls._request_weather.cache_clear()


class Wind:
    """
    –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –≤–µ—Ç–µ—Ä, –∏–º–µ–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∞
    f"{self.speed} –º/—Å (–¥–æ {self.gusts} –º/—Å) {self.direction}"
    """
    def __init__(self, speed, direction, gusts=None):
        """
        –°–∫–æ—Ä–æ—Å—Ç—å –∏ –ø–æ—Ä—ã–≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–º/—á –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –º/—Å
        """
        speed = speed * 0.28
        if gusts:
            gusts = round(gusts * 0.28, 1)
        self.speed = str(float(round(speed, 1)))
        self.direction = self.direction_str(direction)
        self.gusts = gusts

    def __str__(self):
        if self.gusts:
            return f"{self.speed} –º/—Å (–¥–æ {self.gusts} –º/—Å) {self.direction}"
        else:
            return f"{self.speed} –º/—Å {self.direction}"

    @staticmethod
    def direction_str(direction):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        """
        if 22.5 < direction <= 67.5:
            return "–°–í ‚áô"
        elif 67.5 < direction <= 112.5:
            return "–í ‚áê"
        elif 112.5 < direction <= 157.5:
            return "–Æ–í ‚áñ"
        elif 157.5 < direction <= 202.5:
            return "–Æ ‚áë"
        elif 202.5 < direction <= 247.5:
            return "–Æ–ó ‚áó"
        elif 247.5 < direction <= 292.5:
            return "–ó ‚áí"
        elif 292.5 < direction <= 337.5:
            return "–°–ó ‚áò"
        else:
            return "–° ‚áì"


class Clouds:
    """
    –ö–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –∏–∫–æ–Ω–∫—É –æ–±–ª–∞–∫–æ–≤, –æ—Å–∞–¥–∫–æ–≤, –≥—Ä–æ–∑
    """
    def __init__(self, cloud_cover, rain, showers, snow, weather_code):
        self._cloud_cover = cloud_cover
        self._rain = rain + showers
        self._snow = snow
        self._weather_code = weather_code

    def __str__(self):
        return f"{self._get_image()}"

    def _get_image(self):
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–∏–¥–∞ [cloud, rain, snow]
        # –ò –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å
        match [self._cloud_cover, self._rain, self._snow, self._weather_code]:
            case [_, rain, _, code] if rain > 0 and code in [95, 96, 99]:
                return "‚õà"
            case [_, _, _, code] if code in [95, 96, 99]:
                return "üå©"
            case [_, _, snow, _] if snow > 0:
                return "üå®"
            case [cloud, rain, _, _] if rain > 0 and cloud < 50:
                return "üå¶"
            case [cloud, rain, _, _] if rain > 0 and cloud >= 50:
                return "üåß"
            case [cloud, _, _, _] if cloud <= 20:
                return "‚òÄÔ∏è"
            case [cloud, _, _, _] if cloud <= 40:
                return "üå§"
            case [cloud, _, _, _] if cloud <= 60:
                return "‚õÖ"
            case [cloud, _, _, _] if cloud <= 80:
                return "üå•"
            case [cloud, _, _, _] if cloud <= 100:
                return "‚òÅÔ∏è"


class WeatherCode:
    """
    –ö–ª–∞—Å—Å –∏–º–µ—é—â–∏–π —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ - –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É
    """
    def __init__(self, code):
        self.code = code

    def __str__(self):
        get_str = self._get_description()
        if get_str:
            return f"{get_str}"
        else:
            return ""

    def _get_description(self):
        match self.code:
            case 0:
                return "–Ø—Å–Ω–æ"
            case 1:
                return "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ"
            case 2:
                return "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"
            case 3:
                return "–ü–∞—Å–º—É—Ä–Ω–æ"
            case 45:
                return "–¢—É–º–∞–Ω"
            case 48:
                return "–¢—É–º–∞–Ω —Å –∏–∑–º–æ—Ä–æ–∑—å—é"
            case 51:
                return "–õ–µ–≥–∫–∏–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å"
            case 53:
                return "–£–º–µ—Ä–µ–Ω–Ω—ã–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å"
            case 55:
                return "–ü–ª–æ—Ç–Ω—ã–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å"
            case 56:
                return "–õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å"
            case 57:
                return "–ü–ª–æ—Ç–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å"
            case 61:
                return "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å"
            case 63:
                return "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å"
            case 65:
                return "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"
            case 66:
                return "–õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å"
            case 67:
                return "–°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å"
            case 71:
                return "–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥–æ–ø–∞–¥"
            case 73:
                return "–°—Ä–µ–¥–Ω–∏–π —Å–Ω–µ–≥–æ–ø–∞–¥"
            case 75:
                return "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥"
            case 77:
                return "–°–Ω–µ–∂–Ω—ã–π –∑–µ—Ä–Ω–∞"
            case 80:
                return "–î–æ–∂–¥—å"
            case 81:
                return "–õ–∏–≤–µ–Ω—å"
            case 82:
                return "–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å"
            case 85:
                return "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥"
            case 86:
                return "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥"
            case code if code in [95, 96, 99]:
                return "–ì—Ä–æ–∑–∞"


class Rain:
    """
    –ö–ª–∞—Å—Å –∏–º–µ—é—â–∏–π —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∂–¥—è
    """
    def __init__(self, rain, showers):
        """
        –ü–æ–ª—É—á–∞–µ–º –¥–æ–∂–¥—å, –ª–∏–≤–Ω–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, –¥–æ–∂–¥—å –∏ –ª–∏–≤–Ω–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–∫–ª–∞–¥—ã–≤–∞–µ–º
        """
        self.rain = rain
        self.showers = showers
        self.all_rain = self.rain + self.showers

    def __str__(self):
        """
        –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∂–¥—è, —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
        """
        return f"{round(self.all_rain, 1)} –º–º"

    def __bool__(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ–±—ä–µ–∫—Ç –¥–æ–∂–¥—å –Ω–µ –ø—É—Å—Ç–æ–π
        """
        return bool(self.all_rain)
