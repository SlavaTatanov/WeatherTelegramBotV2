from datetime import date, timedelta
from aiohttp import ClientSession
from async_lru import alru_cache
from Bot.utils import req_counter
from copy import deepcopy
from Bot.CALLBACKS import SHORT


def date_formatting(date_for_format: date):
    months = ["–Ø–Ω–≤–∞—Ä—è", "–§–µ–≤—Ä–∞–ª—è", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä–µ–ª—è", "–ú–∞—è", "–ò—é–Ω—è",
              "–ò—é–ª—è", "–ê–≤–≥—É—Å—Ç–∞", "–°–µ–Ω—Ç—è–±—Ä—è", "–û–∫—Ç—è–±—Ä—è", "–ù–æ—è–±—Ä—è", "–î–µ–∫–∞–±—Ä—è"]
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return f"{days[date_for_format.weekday()]}, {date_for_format.day} {months[int(date_for_format.month) - 1]}"


class Weather:
    def __init__(self, coord, cur_date, weather_type):
        self.coord = coord
        self._cur_date = cur_date
        self._weather_type = weather_type

    @staticmethod
    @alru_cache(maxsize=15)
    @req_counter("API_REQ")
    async def _request_weather(coord, start_date: date):
        """
        –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã API
        """
        end_date = start_date + timedelta(days=6)
        url = "https://api.open-meteo.com/v1/forecast"
        params = {
            "latitude": coord[0],
            "longitude": coord[1],
            "start_date": str(start_date),
            "end_date": str(end_date),
            "hourly": "temperature_2m,precipitation_probability,"
                      "rain,showers,snowfall,cloudcover,windspeed_10m,"
                      "winddirection_10m,windgusts_10m",
            "timezone": "auto"
        }
        async with ClientSession() as session:
            async with session.get(url, params=params) as response:
                res = await response.json()
                return res

    @staticmethod
    def _data_normalize(api_req):
        """
        –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        data = api_req["hourly"]
        time_points = [*enumerate(data.pop("time"))]
        res = {}
        for i, t in time_points:
            inner = []
            for k, v in data.items():
                inner.append((k, v[i]))
            res[t] = {k: v for k, v in inner}
            inner.clear()
        return res

    async def current_weather(self):
        req = await self._request_weather(self.coord, self._cur_date)
        req = deepcopy(req)
        normal_data = self._data_normalize(req)
        res = {k: v for k, v in normal_data.items() if str(self._cur_date) in k}
        res_header = date_formatting(self._cur_date) + "\n\n"
        res_body = self._day_formatting(res)
        return res_header + res_body

    def _weekend_days(self):
        year, week, _ = self._cur_date.isocalendar()
        saturday = date.fromisocalendar(year, week, 6)
        sunday = date.fromisocalendar(year, week, 7)
        return saturday, sunday

    def _day_formatting(self, day: dict):
        if self._weather_type == SHORT:
            return self._short_formatting(day)
        else:
            return self._common_formatting(day)

    def _short_formatting(self, day_info: dict):
        night = [v for k, v in day_info.items() if k[-5:] <= "05:00"]
        morning = [v for k, v in day_info.items() if "05:00" < k[-5:] <= "11:00"]
        day = [v for k, v in day_info.items() if "11:00" < k[-5:] <= "17:00"]
        evening = [v for k, v in day_info.items() if "17:00" < k[-5:] <= "23:00"]
        info = {
            "–ù–æ—á—å": self._get_average_fields(night),
            "–£—Ç—Ä–æ": self._get_average_fields(morning),
            "–î–µ–Ω—å": self._get_average_fields(day),
            "–í–µ—á–µ—Ä": self._get_average_fields(evening)
        }
        msg = ""
        for k, v in info.items():
            msg += f"{k}\n\n" \
                   f"üå°: {int(v['temperature_2m'])}‚ÑÉ\n" \
                   f"üí®: {Wind(v['windspeed_10m'], int(v['winddirection_10m']), v['windgusts_10m'])}" \
                   f"\n\n"
        return msg

    @staticmethod
    def _common_formatting(day: dict):
        pass

    @staticmethod
    def _get_average_fields(data):
        average_dict = {}
        for field in data[0].keys():
            # field —ç—Ç–æ –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∫–ª—é—á–µ–π, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            # –±—É–¥–µ—Ç 'cloudcover', 'precipitation_probability' ...
            values = [item[field] for item in data]  # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
            average_dict[field] = round(sum(values) / len(values), 2)
        return average_dict


class Wind:
    def __init__(self, speed, direction, gusts=None):
        """
        –°–∫–æ—Ä–æ—Å—Ç—å –∏ –ø–æ—Ä—ã–≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–º/—á –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –º/—Å
        """
        speed = speed * 0.28
        if gusts:
            gusts = round(gusts * 0.28, 1)
        self.speed = str(float(round(speed, 1)))
        self.direction = self.direction_str(direction)
        self.gusts = gusts

    def __str__(self):
        if self.gusts:
            return f"{self.speed} –º/—Å (–¥–æ {self.gusts} –º/—Å) {self.direction}"
        else:
            return f"{self.speed} –º/—Å {self.direction}"

    @staticmethod
    def direction_str(direction):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        """
        if 22.5 < direction <= 67.5:
            return "–°–í ‚áô"
        elif 67.5 < direction <= 112.5:
            return "–í ‚áê"
        elif 112.5 < direction <= 157.5:
            return "–Æ–í ‚áñ"
        elif 157.5 < direction <= 202.5:
            return "–Æ ‚áë"
        elif 202.5 < direction <= 247.5:
            return "–Æ–ó ‚áó"
        elif 247.5 < direction <= 292.5:
            return "–ó ‚áí"
        elif 292.5 < direction <= 337.5:
            return "–°–ó ‚áò"
        else:
            return "–° ‚áì"
